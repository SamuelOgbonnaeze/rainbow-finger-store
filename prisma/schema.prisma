generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  billboards Billboard[] @relation("StoreToBillboard")
  brands     Brand[]     @relation("StoreToBrand")
  categories Category[]  @relation("StoreToCategory")
  colors     Color[]     @relation("StoreToColor")
  courses    Course[]    @relation("StoreToCourse")
  orders     Order[]     @relation("StoreToOrder")
  products   Product[]   @relation("StoreToProduct")
  sizes      Size[]      @relation("StoreToSize")
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  label      String
  imageUrl   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories Category[]

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  billboardId String
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  products    Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[]
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])

  @@index([storeId])
}

model Color {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  product   Product[]

  @@index([storeId])
}

model Brand {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToBrand", fields: [storeId], references: [id])
  product   Product[]

  @@index([storeId])
}

model Product {
  id         String      @id @default(uuid())
  storeId    String
  categoryId String
  name       String
  price      Decimal
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  sizeId     String
  colorId    String
  brandId    String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  images     Image[]
  orderItems OrderItem[]
  brand      Brand       @relation(fields: [brandId], references: [id])
  category   Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  color      Color       @relation(fields: [colorId], references: [id])
  size       Size        @relation(fields: [sizeId], references: [id])
  store      Store       @relation("StoreToProduct", fields: [storeId], references: [id])

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
  @@index([brandId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  name       String      @default("")
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Course {
  id               String          @id @default(uuid())
  userId           String
  storeId          String
  title            String
  description      String?
  imageUrl         String?
  price            Float?
  isPublished      Boolean         @default(false)
  courseCategoryId String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  attachments      Attachment[]
  chapters         Chapter[]
  courseCategory   CourseCategory? @relation(fields: [courseCategoryId], references: [id])
  store            Store           @relation("StoreToCourse", fields: [storeId], references: [id])

  @@index([courseCategoryId])
}

model CourseCategory {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  url       String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model Chapter {
  id           String         @id @default(uuid())
  title        String
  description  String?
  videoUrl     String?
  position     Int
  isPublished  Boolean        @default(false)
  isFree       Boolean        @default(false)
  courseId     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  muxData      MuxData?
  userProgress UserProgress[]

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?
  chapterId  String  @unique
  chapter    Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id         String   @id @default(uuid())
  userId     String
  chapterId  String
  isComplete Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  chapter    Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
  @@index([chapterId])
}
